#!groovy    
import org.apache.tools.ant.taskdefs.condition.Os

apply from: file('conf/gradle/blueprint.gradle')
apply from: file('conf/gradle/check.gradle')

sourceCompatibility = 1.7
targetCompatibility = 1.7


test {
    systemProperties System.properties
}

bootRun {
    systemProperties System.properties
}

buildscript {
    ext {
        springBootVersion   = '1.2.3.RELEASE'
        dockerPluginVersion = '1.2'
    }
    repositories {
        maven  {
        	url "http://repo1.maven.org/maven2"
    	}
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("se.transmode.gradle:gradle-docker:${dockerPluginVersion}")
        classpath("org.springframework:springloaded:1.2.3.RELEASE")
    }
}

group = 'measurementor'

apply plugin: 'spring-boot'
apply plugin: 'docker'

task buildDocker(type: Docker) {
  push = false
  applicationName = jar.baseName
  dockerfile = file('src/main/docker/Dockerfile')
  doFirst {
    copy {
      from jar
      into stageDir
    }
  }
}

springBoot {
    mainClass = 'com.nike.mm.MeasurementorApplication'
}

bootRun {
    addResources = false
}

jar {
    baseName = 'measurementor'
    version = '0.0.1-SNAPSHOT'
}

apply plugin: 'war'

war {
    baseName = 'measurementor'
    version =  '0.0.1-SNAPSHOT'
}

configurations {
    providedRuntime
    compile.exclude module: "spring-boot-starter-tomcat"
}

war {
    from 'ui_dist'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

task installNpm(type: Exec) {
    description = 'Install NPM, the Node Package Manager'
    workingDir 'ui'
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd', '/c', 'npm', 'install'
    } else {
        commandLine 'npm', 'install'
    }
}

task installBower(type: Exec) {
    description = 'Install Bower, the Package Manager'
    workingDir 'ui'
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd', '/c', 'bower', 'install'
    } else {
        commandLine 'bower', 'install'
    }
}

task buildWebApp(type: Exec) {
    description = 'Builds the web application'
    workingDir 'ui'
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd', '/c', 'grunt', 'build'
    } else {
        commandLine 'grunt', 'build'
    }
}

task copyWebApp(type: Copy) {
    from 'ui_dist'
    into 'src/main/webapp'
}
    
/*
 * Gets the version name from the Git
 */
def getVersionName = { ->
    def command = "git rev-parse HEAD"
    def stdout = new ByteArrayOutputStream()
    def os = System.getProperty("os.name").toLowerCase()
    if (!os.contains("windows")) {
        exec {
            executable "/bin/sh"
            args "-c", command
            standardOutput = stdout
        }
    } else {
        exec {
            executable "cmd"
            args "/c", command
            standardOutput = stdout;
        }
    }
    return stdout.toString().trim()
}

task buildVersion << {
    def revision = getVersionName()
    file('src/main/webapp').mkdirs()
    file('src/main/webapp/version.js').text = """var versionSettings = {
    version: '${version}',
    revision: '${revision}'
}"""
    println 'Git Revision: ' + revision
}

task cleanOutputFolders(type: Delete) {
    delete 'public', 'build', 'ui/dist', 'src/main/webapp'
}

//tasks.buildWebApp.dependsOn installNpm, installBower
//tasks.copyWebApp.dependsOn buildWebApp
tasks.war.dependsOn copyWebApp, buildVersion
tasks.run.dependsOn copyWebApp
tasks.bootRun.dependsOn copyWebApp
tasks.clean.dependsOn cleanOutputFolders
